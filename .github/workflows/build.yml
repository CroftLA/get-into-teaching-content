name: Build and Deploy
on:
  repository_dispatch:
  pull_request:
    types: [assigned, opened, synchronize, reopened]
  push:
    branches:
      - master
env:
  DOCKERHUB_REPOSITORY: dfedigital/get-into-teaching-frontend
  CONTAINER: get-into-teaching-app
  DOMAIN: london.cloudapps.digital
  CF_PROVIDER_DIR: $HOME/.terraform.d/plugins/linux_amd64/terraform-provider-cloudfoundry
jobs:
  deploy:
    name: Build and deploy
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Lint Dockerfile
        uses: brpaz/hadolint-action@master
        with:
             dockerfile: "Dockerfile"

      - name: Get Short SHA
        id: sha
        run: echo ::set-output name=short::$(git rev-parse --short $GITHUB_SHA)

      - name: Get parent SHA if triggered from app pipeline
        if: env.GITHUB_EVENT_NAME == 'repository_dispatch'
        run: |
          echo ::set-env name=parent_sha::${{ github.event.client_payload.parent_sha }}

      - name: Get parent SHA if not triggered from app pipeline
        if: env.GITHUB_EVENT_NAME != 'repository_dispatch'
        run: |
          echo ::set-env name=parent_sha::$(docker run dfedigital/get-into-teaching-web:latest cat /etc/get-into-teaching-app-sha)

      - name: Set new docker image version
        run: |
          docker_image_tag="sha-${{ steps.sha.outputs.short }}-${parent_sha}"
          echo ::set-env name=docker_image_tag::${docker_image_tag}
          echo "Content SHA: ${{ steps.sha.outputs.short }}"
          echo "Parent SHA: ${parent_sha}"
          echo "New version tag: ${docker_image_tag}"

      - name: Build only
        uses: docker/build-push-action@v1
        if: github.ref != 'refs/heads/master'
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PERSONAL_ACCESS_TOKEN }}
          repository: ${{ env.DOCKERHUB_REPOSITORY }}
          always_pull: true
          add_git_labels: true
          tags: ${{ env.docker_image_tag }}
          tag_with_ref: true
          tag_with_sha: true
          push: false
          build_args: APP_SHA=${{ env.parent_sha }},CONTENT_SHA=${{ steps.sha.outputs.short }}

      - name: Build and push to DockerHub
        uses: docker/build-push-action@v1
        if: github.ref == 'refs/heads/master'
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PERSONAL_ACCESS_TOKEN }}
          repository: ${{ env.DOCKERHUB_REPOSITORY }}
          always_pull: true
          add_git_labels: true
          tags: ${{ env.docker_image_tag }}
          tag_with_ref: true
          tag_with_sha: true
          push: true
          build_args: APP_SHA=${{ env.parent_sha }},CONTENT_SHA=${{ steps.sha.outputs.short }}

      - name: Install Terraform CloudFoundry Provider
        if: github.ref == 'refs/heads/master'
        run: |
            mkdir -p $HOME/.terraform.d/plugins/linux_amd64
            wget -O ${{ env.CF_PROVIDER_DIR }} https://github.com/cloudfoundry-community/terraform-provider-cf/releases/latest/download/terraform-provider-cloudfoundry_linux_amd64
            chmod +x ${{ env.CF_PROVIDER_DIR }}

      - name: Wait for any previous runs to complete
        uses: softprops/turnstyle@v1
        env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
           continue-after-seconds: 180   

      - name: Terraform Init
        if: github.ref == 'refs/heads/master'
        run: |
            cd terraform/paas && pwd
            terraform init -backend-config=dev.bk.vars
        env:
              ARM_ACCESS_KEY:           "${{ secrets.DEV_ARM_ACCESS_KEY  }}"
              TF_VAR_user:              "${{ secrets.GOVUKPAAS_USERNAME  }}"
              TF_VAR_password:          "${{ secrets.GOVUKPAAS_PASSWORD  }}"

      - name: Terraform Plan
        if: github.ref == 'refs/heads/master'
        run: |
            cd terraform/paas && pwd
            terraform plan -var-file=dev.env.tfvars -out plan
        env:
              TF_VAR_paas_app_docker_image: ${{env.DOCKERHUB_REPOSITORY}}:${{ env.docker_image_tag }}
              ARM_ACCESS_KEY:           "${{ secrets.DEV_ARM_ACCESS_KEY  }}"
              TF_VAR_user:              "${{ secrets.GOVUKPAAS_USERNAME  }}"
              TF_VAR_password:          "${{ secrets.GOVUKPAAS_PASSWORD  }}"
              TF_VAR_HTTPAUTH_PASSWORD: "${{ secrets.HTTPAUTH_PASSWORD }}"
              TF_VAR_HTTPAUTH_USERNAME: "${{ secrets.HTTPAUTH_USERNAME }}"
              TF_VAR_RAILS_MASTER_KEY:  "${{ secrets.RAILS_MASTER_KEY_ROLLING }}"
              TF_VAR_RAILS_ENV:         "rolling"

      - name: Terraform Apply
        if: github.ref == 'refs/heads/master'
        run: |
            cd terraform/paas && pwd
            terraform apply -auto-approve plan
        env:
              ARM_ACCESS_KEY:           "${{ secrets.DEV_ARM_ACCESS_KEY  }}"
              TF_VAR_user:              "${{ secrets.GOVUKPAAS_USERNAME  }}"
              TF_VAR_password:          "${{ secrets.GOVUKPAAS_PASSWORD  }}"

      - name: Smoke tests
        run: |
             tests/confidence/healthcheck.sh  "get-into-teaching-app-dev" "${parent_sha}" "${{ steps.sha.outputs.short }}"
        env:
             HTTPAUTH_PASSWORD: "${{ secrets.HTTPAUTH_PASSWORD }}"
             HTTPAUTH_USERNAME: "${{ secrets.HTTPAUTH_USERNAME }}"

      - name:  Send Message to Sentry.io
        if: always()
        uses: sfawcett123/sentry-event@v1
        with:
             MESSAGE: "Build Application - get-into-teaching-app"
             STATE:  ${{job.status}}
             ENVIRON: "Development"
        env:
            SENTRY_DSN: ${{secrets.DEV_OPS_SENTRY_DSN}}
  owasp:
    name: OWASP Test
    runs-on: ubuntu-latest
    if: always()
    needs: deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: ZAP Scan
        uses: zaproxy/action-full-scan@v0.1.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: 'owasp/zap2docker-stable'
          target: 'https://${{ secrets.HTTPAUTH_USERNAME }}:${{ secrets.HTTPAUTH_PASSWORD }}@${{env.CONTAINER}}-dev.${{env.DOMAIN}}/'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
      - name:  Send Message to Sentry.io
        if: always()
        uses: sfawcett123/sentry-event@v1
        with:
             MESSAGE: "OWASP Application - get-into-teaching-app"
             STATE:  ${{job.status}}
             ENVIRON: "Development"
        env:
            SENTRY_DSN: ${{secrets.DEV_OPS_SENTRY_DSN}}

  accessibility:
    name: Accessibility Test
    runs-on: ubuntu-latest
    if: always()
#   if: github.ref == 'refs/heads/master'
    needs: deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Accessibility Scan
        run: |-
             docker run -t --rm -v ${PWD}/.accessibility.file:/app/.accessibility.file \
                    dfedigital/accessibility_crawler:v1 -U ${{ secrets.HTTPAUTH_USERNAME }} -P ${{ secrets.HTTPAUTH_PASSWORD }} --file '/app/.accessibility.file'

      - name:  Send Message to Sentry.io
        if: always()
        uses: sfawcett123/sentry-event@v1
        with:
             MESSAGE: "Accessibility Application - get-into-teaching-app"
             STATE:  ${{job.status}}
             ENVIRON: "Development"
        env:
            SENTRY_DSN: ${{secrets.DEV_OPS_SENTRY_DSN}}

