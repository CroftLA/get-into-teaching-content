name: Build and Deploy

on:
  repository_dispatch:
  pull_request:
    types: [assigned, opened, synchronize, reopened]
  push:
    branches:
      - master
env:
  DOCKERHUB_REPOSITORY: dfedigital/get-into-teaching-frontend
  CONTAINER: get-into-teaching-app
  DOMAIN: london.cloudapps.digital
  CF_PROVIDER_DIR: $HOME/.terraform.d/plugins/linux_amd64/terraform-provider-cloudfoundry
  CF_PROVIDER_URL: https://github.com/cloudfoundry-community/terraform-provider-cloudfoundry/releases/download/v0.12.3/terraform-provider-cloudfoundry_v0.12.3_linux_amd64

jobs:
  turnstyle:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Check workflow concurrency
        uses: softprops/turnstyle@v1
        with:
          poll-interval-seconds: 20
          same-branch-only: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Slack Notification
        if: failure()
        uses: rtCamp/action-slack-notify@master
        env:
           SLACK_CHANNEL: getintoteaching_tech
           SLACK_COLOR: '#3278BD'
           SLACK_ICON: https://github.com/rtCamp.png?size=48
           SLACK_MESSAGE: 'Content Delivery has failed. This is due to a workflow concurrency issue'
           SLACK_TITLE: 'Failure: ${{ github.workflow }}'
           SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

  deploy:
    name: Build and deploy
    runs-on: ubuntu-latest
    needs: turnstyle 
    steps:
      - name: Get parent SHA if triggered from app pipeline
        id: parent-sha
        if: env.GITHUB_EVENT_NAME == 'repository_dispatch'
        run: |
          echo ::set-output name=full::${{ github.event.client_payload.parent_sha }}
          echo ::set-output name=short::$(echo "${{ github.event.client_payload.parent_sha }}" | cut -c -7)

      - name: Derive base image
        id: docker-image
        if: env.GITHUB_EVENT_NAME == 'repository_dispatch'
        run: |-
          echo ::set-output name=image::${{ env.BASE_IMAGE }}:sha-${{ steps.parent-sha.outputs.short }}

      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Update Dockerfile
        if: env.GITHUB_EVENT_NAME == 'repository_dispatch'
        run: |-
          sed -i "s~FROM .*~FROM ${{ steps.docker-image.outputs.image }}~" Dockerfile

      - name: Commit and push
        if: env.GITHUB_EVENT_NAME == 'repository_dispatch'
        run: |
          git config user.name "GiT Workflow Bot"
          git config user.email "<>"
          git add Dockerfile
          git commit -m "Updated base image to sha-${{ steps.parent-sha.outputs.short }}

          ${{ steps.docker-image.outputs.image }}"
          git push

      - name: Lint Dockerfile
        uses: brpaz/hadolint-action@master
        with:
             dockerfile: "Dockerfile"

      - name: Get Short SHA
        id: sha
        run: echo ::set-output name=short::$(echo $GITHUB_SHA | cut -c -7)

      - name: Build only
        uses: docker/build-push-action@v1
        if: github.ref != 'refs/heads/master'
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PERSONAL_ACCESS_TOKEN }}
          repository: ${{ env.DOCKERHUB_REPOSITORY }}
          always_pull: true
          add_git_labels: true
          tag_with_ref: true
          tag_with_sha: true
          push: false
          build_args: CONTENT_SHA=${{ steps.sha.outputs.short }}

      - name: Build and push to DockerHub
        uses: docker/build-push-action@v1
        if: github.ref == 'refs/heads/master'
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PERSONAL_ACCESS_TOKEN }}
          repository: ${{ env.DOCKERHUB_REPOSITORY }}
          always_pull: true
          add_git_labels: true
          tag_with_ref: true
          tag_with_sha: true
          push: true
          build_args: CONTENT_SHA=${{ steps.sha.outputs.short }}

      - uses: hashicorp/setup-terraform@v1
        with:
           terraform_version: 0.12.29

      - name: Install Terraform CloudFoundry Provider
        if: github.ref == 'refs/heads/master'
        run: |
            mkdir -p $HOME/.terraform.d/plugins/linux_amd64
            wget -O ${{ env.CF_PROVIDER_DIR }} ${{ env.CF_PROVIDER_URL }}
            chmod +x ${{ env.CF_PROVIDER_DIR }}

      - name: Terraform Init
        if: github.ref == 'refs/heads/master'
        run: |
            cd terraform/paas && pwd
            terraform init -backend-config=dev.bk.vars
        env:
              ARM_ACCESS_KEY:           "${{ secrets.DEV_ARM_ACCESS_KEY  }}"
              TF_VAR_user:              "${{ secrets.GOVUKPAAS_USERNAME  }}"
              TF_VAR_password:          "${{ secrets.GOVUKPAAS_PASSWORD  }}"

      - name: Terraform Plan
        if: github.ref == 'refs/heads/master'
        run: |
            cd terraform/paas && pwd
            terraform plan -var-file=dev.env.tfvars -out plan
        env:
              TF_VAR_paas_app_docker_image: ${{env.DOCKERHUB_REPOSITORY}}:sha-${{ steps.sha.outputs.short }}
              ARM_ACCESS_KEY:           "${{ secrets.DEV_ARM_ACCESS_KEY  }}"
              TF_VAR_user:              "${{ secrets.GOVUKPAAS_USERNAME  }}"
              TF_VAR_password:          "${{ secrets.GOVUKPAAS_PASSWORD  }}"
              TF_VAR_HTTPAUTH_PASSWORD: "${{ secrets.HTTPAUTH_PASSWORD }}"
              TF_VAR_HTTPAUTH_USERNAME: "${{ secrets.HTTPAUTH_USERNAME }}"
              TF_VAR_RAILS_MASTER_KEY:  "${{ secrets.RAILS_MASTER_KEY_ROLLING }}"
              TF_VAR_RAILS_ENV:         "rolling"

      - name: Terraform Apply
        if: github.ref == 'refs/heads/master'
        run: |
            cd terraform/paas && pwd
            terraform apply -auto-approve plan
        env:
              ARM_ACCESS_KEY:           "${{ secrets.DEV_ARM_ACCESS_KEY  }}"
              TF_VAR_user:              "${{ secrets.GOVUKPAAS_USERNAME  }}"
              TF_VAR_password:          "${{ secrets.GOVUKPAAS_PASSWORD  }}"

      - name: Smoke tests
        if: github.ref == 'refs/heads/master'
        run: |
             tests/confidence/healthcheck.sh  "get-into-teaching-app-dev" "${{ steps.sha.outputs.short }}"
        env:
             HTTPAUTH_PASSWORD: "${{ secrets.HTTPAUTH_PASSWORD }}"
             HTTPAUTH_USERNAME: "${{ secrets.HTTPAUTH_USERNAME }}"

      - name: Create Sentry release
        if: success()
        uses: getsentry/action-release@v1.1.1
        env:
           SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
           SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
           SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        with:
           environment: qa

      - name: Slack Notification
        if: failure()
        uses: rtCamp/action-slack-notify@master
        env:
           SLACK_CHANNEL: getintoteaching_tech
           SLACK_COLOR: '#3278BD'
           SLACK_ICON: https://github.com/rtCamp.png?size=48
           SLACK_MESSAGE: ':disappointed_relieved: Pipeline Failure carrying out job ${{github.job}} :disappointed_relieved:'
           SLACK_TITLE: 'Failure: ${{ github.workflow }}'
           SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
